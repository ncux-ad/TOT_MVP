#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞ TOT MVP
"""

import os
import sys
import subprocess
import platform

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}: {e}")
        print(f"–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏: {e.stderr}")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_node_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Node.js"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js...")
    try:
        result = subprocess.run("node --version", shell=True, capture_output=True, text=True)
        version = result.stdout.strip()
        print(f"‚úÖ Node.js {version}")
        return True
    except:
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 16+")
        return False

def check_npm():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ npm"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ npm...")
    try:
        result = subprocess.run("npm --version", shell=True, capture_output=True, text=True)
        version = result.stdout.strip()
        print(f"‚úÖ npm {version}")
        return True
    except:
        print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Docker"""
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...")
    try:
        result = subprocess.run("docker --version", shell=True, capture_output=True, text=True)
        version = result.stdout.strip()
        print(f"‚úÖ {version}")
        return True
    except:
        print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker")
        return False

def setup_python_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("\nüêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not os.path.exists("venv"):
        print("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        if not run_command("python -m venv venv", "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"):
            return False
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if platform.system() == "Windows":
        activate_script = "venv\\Scripts\\Activate.ps1"
        pip_path = "venv\\Scripts\\pip"
    else:
        activate_script = "source venv/bin/activate"
        pip_path = "venv/bin/pip"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    if not run_command(f"{pip_path} install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not run_command(f"{pip_path} install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False
    
    return True

def setup_node_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("\nüì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not run_command("npm install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False
    
    return True

def setup_docker():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Docker"""
    print("\nüê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker...")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    if not os.path.exists(".env"):
        if os.path.exists("env.example"):
            if platform.system() == "Windows":
                run_command("copy env.example .env", "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞")
            else:
                run_command("cp env.example .env", "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞")
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return True

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "backend/api-gateway",
        "backend/user-service", 
        "backend/profile-service",
        "backend/booking-service",
        "backend/geo-service",
        "backend/payment-service",
        "backend/notification-service",
        "backend/chat-service",
        "backend/rating-service",
        "backend/event-service",
        "backend/emergency-service",
        "backend/security-service",
        "frontend/patient-app",
        "frontend/doctor-app",
        "frontend/clinic-web",
        "frontend/admin-panel",
        "docs",
        "scripts"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ TOT MVP")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_python_version():
        sys.exit(1)
    
    if not check_node_version():
        print("‚ö†Ô∏è Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ frontend")
    
    if not check_npm():
        print("‚ö†Ô∏è npm –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ frontend")
    
    if not check_docker():
        print("‚ö†Ô∏è Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_python_environment():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if check_node_version() and check_npm():
        setup_node_environment()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Docker (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if check_docker():
        setup_docker()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: docker-compose up postgres redis")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose up")
    print("4. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ: python backend/api-gateway/main.py")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("- README.md - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    print("- docs/ARCHITECTURE.md - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("- docs/DEPLOYMENT.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")

if __name__ == "__main__":
    main() 