/**
 * @file: Appointments.tsx
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –ø—Ä–∏—ë–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * @dependencies: React, @mui/material, @mui/icons-material, axios
 * @created: 2024-01-28
 */
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Button,
  CircularProgress,
  Alert,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  Add as AddIcon,
  CheckCircle as ConfirmedIcon,
  Cancel as CancelledIcon,
  Schedule as PendingIcon
} from '@mui/icons-material';
import Modal from '../components/Modal';
import AppointmentForm from '../components/AppointmentForm';
import ConfirmDialog from '../components/ConfirmDialog';

interface Appointment {
  id: string;
  patient_name: string;
  doctor_name: string;
  clinic_name: string;
  appointment_date: string;
  appointment_time: string;
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';
  notes: string;
  created_at: string;
}

const Appointments: React.FC = () => {
  console.log('üìÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Appointments –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [addModalOpen, setAddModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [formLoading, setFormLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);
  
  // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [appointmentToDelete, setAppointmentToDelete] = useState<Appointment | null>(null);
  const [deleteLoading, setDeleteLoading] = useState(false);

  useEffect(() => {
    console.log('üîÑ useEffect: –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏');
    fetchAppointments();
  }, []);

  const fetchAppointments = async () => {
    setLoading(true);
    setError(null);
    try {
      console.log('üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π...');
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ API –¥–ª—è –∑–∞–ø–∏—Å–µ–π –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω
      const mockAppointments: Appointment[] = [
        {
          id: 'appointment-1',
          patient_name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
          doctor_name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤',
          clinic_name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä "–ó–¥–æ—Ä–æ–≤—å–µ"',
          appointment_date: '2024-01-30',
          appointment_time: '10:00',
          status: 'confirmed',
          notes: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞',
          created_at: '2024-01-25T09:00:00Z'
        },
        {
          id: 'appointment-2',
          patient_name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
          doctor_name: '–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
          clinic_name: '–ö–ª–∏–Ω–∏–∫–∞ "–î–æ–±—Ä—ã–π –¥–æ–∫—Ç–æ—Ä"',
          appointment_date: '2024-02-01',
          appointment_time: '14:30',
          status: 'pending',
          notes: '–û—Å–º–æ—Ç—Ä –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞',
          created_at: '2024-01-26T11:30:00Z'
        },
        {
          id: 'appointment-3',
          patient_name: '–ê–ª–µ–∫—Å–µ–π –í–æ–ª–∫–æ–≤',
          doctor_name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤',
          clinic_name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä "–ó–¥–æ—Ä–æ–≤—å–µ"',
          appointment_date: '2024-01-29',
          appointment_time: '16:00',
          status: 'cancelled',
          notes: '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º',
          created_at: '2024-01-24T15:45:00Z'
        }
      ];
      
      setAppointments(mockAppointments);
      console.log('üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:', mockAppointments);
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mockAppointments.length} –∑–∞–ø–∏—Å–µ–π`);
      
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      // const response = await axios.get('/admin/appointments?page=1&limit=100');
      // const responseData = response.data.data || response.data;
      // setAppointments(responseData.appointments || []);
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', err);
      setError(err.response?.data?.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π');
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed': return 'success';
      case 'pending': return 'warning';
      case 'cancelled': return 'error';
      case 'completed': return 'info';
      default: return 'default';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞';
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'confirmed': return <ConfirmedIcon />;
      case 'pending': return <PendingIcon />;
      case 'cancelled': return <CancelledIcon />;
      case 'completed': return <ConfirmedIcon />;
      default: return <PendingIcon />;
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
  };

  const handleRefresh = () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π');
    fetchAppointments();
  };

  const handleAddAppointment = () => {
    console.log('‚ûï –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    setAddModalOpen(true);
    setFormError(null);
  };

  const handleEditAppointment = (appointment: Appointment) => {
    console.log('‚úèÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', appointment.id);
    setSelectedAppointment(appointment);
    setEditModalOpen(true);
    setFormError(null);
  };

  const handleSubmitAppointment = async (formData: any) => {
    setFormLoading(true);
    setFormError(null);
    
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', formData);
      
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      
      console.log('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setAddModalOpen(false);
      setEditModalOpen(false);
      setSelectedAppointment(null);
      fetchAppointments(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', err);
      setFormError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏');
    } finally {
      setFormLoading(false);
    }
  };

  const handleFormSubmit = (data: any) => {
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏:', data);
    handleSubmitAppointment(data);
  };

  const handleCloseModal = () => {
    setAddModalOpen(false);
    setEditModalOpen(false);
    setSelectedAppointment(null);
    setFormError(null);
  };

  const handleDeleteAppointment = (appointment: Appointment) => {
    console.log('üóëÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', appointment.id);
    setAppointmentToDelete(appointment);
    setDeleteDialogOpen(true);
  };

  const handleConfirmDelete = async () => {
    if (!appointmentToDelete) return;
    
    setDeleteLoading(true);
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å:', appointmentToDelete.id);
      
      // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      
      console.log('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setAppointments(prev => prev.filter(appointment => appointment.id !== appointmentToDelete.id));
      
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', err);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏');
    } finally {
      setDeleteLoading(false);
      setAppointmentToDelete(null);
    }
  };

  const handleViewAppointment = (appointment: Appointment) => {
    console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏:', appointment.id);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
  };

  if (loading) {
    return (
      <Box p={3} display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" component="h1">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
        </Typography>
        <Box>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={handleAddAppointment}
            sx={{ mr: 1 }}
          >
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
          </Button>
          <Button
            variant="outlined"
            startIcon={<RefreshIcon />}
            onClick={handleRefresh}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <TableContainer component={Paper} elevation={2}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>–ü–∞—Ü–∏–µ–Ω—Ç</TableCell>
              <TableCell>–í—Ä–∞—á</TableCell>
              <TableCell>–ö–ª–∏–Ω–∏–∫–∞</TableCell>
              <TableCell>–î–∞—Ç–∞</TableCell>
              <TableCell>–í—Ä–µ–º—è</TableCell>
              <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
              <TableCell align="center">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {appointments.length === 0 ? (
              <TableRow>
                <TableCell colSpan={8} align="center">
                  <Typography variant="body2" color="textSecondary">
                    –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              appointments.map((appointment) => (
                <TableRow key={appointment.id} hover>
                  <TableCell>{appointment.id.substring(0, 8)}...</TableCell>
                  <TableCell>{appointment.patient_name}</TableCell>
                  <TableCell>{appointment.doctor_name}</TableCell>
                  <TableCell>{appointment.clinic_name}</TableCell>
                  <TableCell>{formatDate(appointment.appointment_date)}</TableCell>
                  <TableCell>{appointment.appointment_time}</TableCell>
                  <TableCell>
                    <Chip
                      icon={getStatusIcon(appointment.status)}
                      label={getStatusText(appointment.status)}
                      color={getStatusColor(appointment.status) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell align="center">
                    <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å">
                      <IconButton onClick={() => handleViewAppointment(appointment)} size="small">
                        <ViewIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                      <IconButton onClick={() => handleEditAppointment(appointment)} size="small">
                        <EditIcon />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                      <IconButton onClick={() => handleDeleteAppointment(appointment)} size="small" color="error">
                        <DeleteIcon />
                      </IconButton>
                    </Tooltip>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>

      <Box mt={2}>
        <Typography variant="body2" color="textSecondary">
          –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {appointments.length}
        </Typography>
      </Box>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
      <Modal
        open={addModalOpen}
        onClose={handleCloseModal}
        title="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
        actions={
          <>
            <Button onClick={handleCloseModal} disabled={formLoading}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              variant="contained" 
              onClick={() => handleFormSubmit({})}
              disabled={formLoading}
            >
              {formLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </Button>
          </>
        }
      >
        <AppointmentForm
          onSubmit={handleFormSubmit}
          onCancel={handleCloseModal}
          loading={formLoading}
          error={formError}
        />
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
      <Modal
        open={editModalOpen}
        onClose={handleCloseModal}
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å"
        actions={
          <>
            <Button onClick={handleCloseModal} disabled={formLoading}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              variant="contained" 
              onClick={() => handleFormSubmit(selectedAppointment)}
              disabled={formLoading}
            >
              {formLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
            </Button>
          </>
        }
      >
        <AppointmentForm
          appointment={selectedAppointment ? {
            patient_id: selectedAppointment.patient_name,
            doctor_id: selectedAppointment.doctor_name,
            clinic_id: selectedAppointment.clinic_name,
            appointment_date: selectedAppointment.appointment_date,
            appointment_time: selectedAppointment.appointment_time,
            status: selectedAppointment.status,
            notes: selectedAppointment.notes
          } : undefined}
          onSubmit={handleFormSubmit}
          onCancel={handleCloseModal}
          loading={formLoading}
          error={formError}
                 />
       </Modal>

       {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
       <ConfirmDialog
         open={deleteDialogOpen}
         onClose={() => {
           setDeleteDialogOpen(false);
           setAppointmentToDelete(null);
         }}
         onConfirm={handleConfirmDelete}
         title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
         message={`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –¥–ª—è "${appointmentToDelete?.patient_name}"?`}
         confirmText="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"
         loading={deleteLoading}
         severity="error"
       />
     </Box>
   );
 };

export default Appointments; 