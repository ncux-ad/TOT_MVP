import React, { useState, useEffect } from 'react';
import { Stethoscope, Star, MapPin, Clock } from 'lucide-react';

interface Doctor {
  id: string;
  first_name: string;
  last_name: string;
  specialization: string;
  experience_years: number;
  email: string;
  phone: string;
  is_active: boolean;
  is_verified: boolean;
}

const DoctorsPage: React.FC = () => {
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchDoctors = async () => {
      try {
        setLoading(true);
        const response = await fetch('http://localhost:8000/doctors');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setDoctors(data.doctors || []);
      } catch (err: any) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π');
        // Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
        setDoctors([
          {
            id: '1',
            first_name: '–ò–≤–∞–Ω',
            last_name: '–ü–µ—Ç—Ä–æ–≤',
            specialization: '–¢–µ—Ä–∞–ø–µ–≤—Ç',
            experience_years: 15,
            email: 'doctor1@tot.ru',
            phone: '+7 (495) 123-45-67',
            is_active: true,
            is_verified: true
          },
          {
            id: '2',
            first_name: '–ê–Ω–Ω–∞',
            last_name: '–ö–æ–∑–ª–æ–≤–∞',
            specialization: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
            experience_years: 12,
            email: 'doctor2@tot.ru',
            phone: '+7 (495) 234-56-78',
            is_active: true,
            is_verified: true
          }
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchDoctors();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          –í—Ä–∞—á–∏
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-300">
          –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
        </p>
      </div>

      {error && (
        <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 text-yellow-700 dark:text-yellow-300 px-4 py-3 rounded-lg">
          <p className="font-medium">‚ö†Ô∏è –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ</p>
          <p className="text-sm">{error}</p>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {doctors.map((doctor) => (
          <div key={doctor.id} className="bg-white dark:bg-gray-800 shadow-lg rounded-lg overflow-hidden hover:shadow-xl transition-shadow">
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div className="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mr-4">
                  <span className="text-blue-600 dark:text-blue-400 text-xl">üë®‚Äç‚öïÔ∏è</span>
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {doctor.first_name} {doctor.last_name}
                  </h3>
                  <p className="text-blue-600 dark:text-blue-400 font-medium">
                    {doctor.specialization}
                  </p>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex items-center">
                  <span className="text-yellow-500 mr-2">
                    {'‚≠ê'.repeat(Math.floor(4.5))}
                  </span>
                  <span className="text-gray-600 dark:text-gray-300">
                    4.5 ({doctor.experience_years} –ª–µ—Ç –æ–ø—ã—Ç–∞)
                  </span>
                </div>

                <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                  <MapPin size={16} />
                  <span>–ú–æ—Å–∫–≤–∞</span>
                </div>

                <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                  <Clock size={16} />
                  <span>{doctor.experience_years} –ª–µ—Ç –æ–ø—ã—Ç–∞</span>
                </div>

                <button 
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
                >
                  –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {doctors.length === 0 && !loading && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üë®‚Äç‚öïÔ∏è</div>
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
            –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
          </p>
        </div>
      )}
    </div>
  );
};

export default DoctorsPage; 