# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π PowerShell —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è Windows
# TOT MVP - –¢–≤–æ—è –¢–æ—á–∫–∞ –û–ø–æ—Ä—ã

param(
    [switch]$UseWSL,
    [switch]$UseDocker,
    [switch]$LocalOnly
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
function Test-Requirements {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Python –Ω–∞–π–¥–µ–Ω: $pythonVersion"
        } else {
            Write-Error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
            exit 1
        }
    } catch {
        Write-Error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    try {
        $nodeVersion = node --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Node.js –Ω–∞–π–¥–µ–Ω: $nodeVersion"
        } else {
            Write-Warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }
    } catch {
        Write-Warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    try {
        $npmVersion = npm --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "npm –Ω–∞–π–¥–µ–Ω: $npmVersion"
        } else {
            Write-Warning "npm –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }
    } catch {
        Write-Warning "npm –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ WSL
    if ($UseWSL) {
        try {
            $wslVersion = wsl --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Success "WSL –Ω–∞–π–¥–µ–Ω: $wslVersion"
            } else {
                Write-Error "WSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WSL2"
                exit 1
            }
        } catch {
            Write-Error "WSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WSL2"
            exit 1
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ($UseDocker -or -not $LocalOnly) {
        try {
            $dockerVersion = docker --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Success "Docker –Ω–∞–π–¥–µ–Ω: $dockerVersion"
            } else {
                Write-Warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
        } catch {
            Write-Warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Setup-PythonEnvironment {
    Write-Info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if (-not (Test-Path "venv")) {
        Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python -m venv venv
        Write-Success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    }
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    & ".\venv\Scripts\Activate.ps1"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    Write-Info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
    python -m pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip install -r requirements.txt
    
    Write-Success "Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Setup-NodeEnvironment {
    try {
        $nodeVersion = node --version 2>&1
        $npmVersion = npm --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            npm install
            Write-Success "Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        }
    } catch {
        Write-Warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É frontend"
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker
function Setup-Docker {
    try {
        $dockerVersion = docker --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker..."
            
            # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            if (-not (Test-Path ".env") -and (Test-Path "env.example")) {
                Copy-Item "env.example" ".env"
                Write-Success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example"
            }
            
            Write-Success "Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
    } catch {
        Write-Warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function Create-Directories {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    $directories = @(
        "backend/api-gateway",
        "backend/user-service",
        "backend/profile-service",
        "backend/booking-service",
        "backend/geo-service",
        "backend/payment-service",
        "backend/notification-service",
        "backend/chat-service",
        "backend/rating-service",
        "backend/event-service",
        "backend/emergency-service",
        "backend/security-service",
        "frontend/patient-app",
        "frontend/doctor-app",
        "frontend/clinic-web",
        "frontend/admin-panel",
        "docs",
        "scripts",
        "logs",
        "data"
    )
    
    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
            Write-Success "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Windows
function Create-WindowsScripts {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Windows..."
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Windows
    $startScript = @"
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ TOT MVP –¥–ª—è Windows

Write-Host "üöÄ –ó–∞–ø—É—Å–∫ TOT MVP..." -ForegroundColor Green

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
& ".\venv\Scripts\Activate.ps1"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
try {
    docker --version | Out-Null
    Write-Host "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker..." -ForegroundColor Blue
    docker-compose up -d
} catch {
    Write-Host "üêç –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ..." -ForegroundColor Blue
    Start-Process -FilePath "python" -ArgumentList "backend/api-gateway/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/user-service/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/profile-service/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/booking-service/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/geo-service/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/payment-service/main.py" -WindowStyle Hidden
    Start-Process -FilePath "python" -ArgumentList "backend/notification-service/main.py" -WindowStyle Hidden
    Write-Host "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Green
}

Write-Host "üåê API Gateway –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000" -ForegroundColor Green
Write-Host "üìä Swagger UI: http://localhost:8000/docs" -ForegroundColor Green
"@
    
    Set-Content -Path "start.ps1" -Value $startScript
    Write-Success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.ps1"
    
    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    $stopScript = @"
# –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TOT MVP –¥–ª—è Windows

Write-Host "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TOT MVP..." -ForegroundColor Yellow

try {
    docker --version | Out-Null
    docker-compose down
} catch {
    Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" } | Stop-Process -Force
}

Write-Host "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green
"@
    
    Set-Content -Path "stop.ps1" -Value $stopScript
    Write-Success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç stop.ps1"
    
    # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    $statusScript = @"
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ TOT MVP –¥–ª—è Windows

Write-Host "üìä –°—Ç–∞—Ç—É—Å TOT MVP..." -ForegroundColor Blue

try {
    docker --version | Out-Null
    docker-compose ps
} catch {
    Write-Host "–ü—Ä–æ—Ü–µ—Å—Å—ã Python:" -ForegroundColor Blue
    Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*main.py*" } | Format-Table -AutoSize
}

Write-Host ""
Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ API:" -ForegroundColor Blue
try {
    Invoke-RestMethod -Uri "http://localhost:8000/health" -Method Get
} catch {
    Write-Host "API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
}
"@
    
    Set-Content -Path "status.ps1" -Value $statusScript
    Write-Success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç status.ps1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ WSL —Å–∫—Ä–∏–ø—Ç–∞
function Create-WSLScript {
    if ($UseWSL) {
        Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ WSL —Å–∫—Ä–∏–ø—Ç–∞..."
        
        $wslScript = @"
#!/bin/bash
# WSL —Å–∫—Ä–∏–ø—Ç –¥–ª—è TOT MVP

echo "üöÄ –ó–∞–ø—É—Å–∫ TOT MVP –≤ WSL..."

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /mnt/c/Users/$env:USERNAME/OneDrive/Projects/TOT_MVP

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source venv/bin/activate

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
python backend/api-gateway/main.py &
python backend/user-service/main.py &
python backend/profile-service/main.py &
python backend/booking-service/main.py &
python backend/geo-service/main.py &
python backend/payment-service/main.py &
python backend/notification-service/main.py &

echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ WSL"
echo "üåê API Gateway –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000"
"@
        
        Set-Content -Path "start-wsl.sh" -Value $wslScript
        Write-Success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start-wsl.sh –¥–ª—è WSL"
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ TOT MVP –¥–ª—è Windows" -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    
    if ($UseWSL) {
        Write-Host "üîß –†–µ–∂–∏–º: WSL (Ubuntu)" -ForegroundColor Yellow
    } elseif ($UseDocker) {
        Write-Host "üê≥ –†–µ–∂–∏–º: Docker" -ForegroundColor Yellow
    } elseif ($LocalOnly) {
        Write-Host "üêç –†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω—ã–π Python" -ForegroundColor Yellow
    } else {
        Write-Host "üîÑ –†–µ–∂–∏–º: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" -ForegroundColor Yellow
    }
    
    Test-Requirements
    Create-Directories
    Setup-PythonEnvironment
    Setup-NodeEnvironment
    Setup-Docker
    Create-WindowsScripts
    Create-WSLScript
    
    Write-Host ""
    Write-Host "================================================" -ForegroundColor Green
    Write-Success "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    Write-Host ""
    Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
    Write-Host "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    Write-Host "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: .\start.ps1"
    Write-Host "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: .\status.ps1"
    Write-Host "4. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: .\stop.ps1"
    
    if ($UseWSL) {
        Write-Host "5. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤ WSL: wsl ./start-wsl.sh"
    }
    
    Write-Host ""
    Write-Host "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:" -ForegroundColor Yellow
    Write-Host "- README.md - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    Write-Host "- docs/ARCHITECTURE.md - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"
    Write-Host "- docs/DEPLOYMENT.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
    Write-Host ""
    Write-Host "üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000" -ForegroundColor Green
    Write-Host "üìä Swagger UI: http://localhost:8000/docs" -ForegroundColor Green
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Main 