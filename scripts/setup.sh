#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è Linux/macOS
# TOT MVP - –¢–≤–æ—è –¢–æ—á–∫–∞ –û–ø–æ—Ä—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        print_success "Python $PYTHON_VERSION –Ω–∞–π–¥–µ–Ω"
    elif command -v python &> /dev/null; then
        PYTHON_VERSION=$(python --version | cut -d' ' -f2)
        print_success "Python $PYTHON_VERSION –Ω–∞–π–¥–µ–Ω"
    else
        print_error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_success "Node.js $NODE_VERSION –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        print_success "npm $NPM_VERSION –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "npm –Ω–µ –Ω–∞–π–¥–µ–Ω. Frontend –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if command -v docker &> /dev/null; then
        DOCKER_VERSION=$(docker --version)
        print_success "Docker –Ω–∞–π–¥–µ–Ω: $DOCKER_VERSION"
    else
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if command -v docker-compose &> /dev/null; then
        print_success "Docker Compose –Ω–∞–π–¥–µ–Ω"
    elif docker compose version &> /dev/null; then
        print_success "Docker Compose (v2) –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_python_env() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -d "venv" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv venv
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    fi
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    source venv/bin/activate
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
    pip install --upgrade pip
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pip install -r requirements.txt
    
    print_success "Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_node_env() {
    if command -v node &> /dev/null && command -v npm &> /dev/null; then
        print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        npm install
        print_success "Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    else
        print_warning "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É frontend"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker
setup_docker() {
    if command -v docker &> /dev/null; then
        print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker..."
        
        # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
        if [ ! -f ".env" ] && [ -f "env.example" ]; then
            cp env.example .env
            print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example"
        fi
        
        print_success "Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    directories=(
        "backend/api-gateway"
        "backend/user-service"
        "backend/profile-service"
        "backend/booking-service"
        "backend/geo-service"
        "backend/payment-service"
        "backend/notification-service"
        "backend/chat-service"
        "backend/rating-service"
        "backend/event-service"
        "backend/emergency-service"
        "backend/security-service"
        "frontend/patient-app"
        "frontend/doctor-app"
        "frontend/clinic-web"
        "frontend/admin-panel"
        "docs"
        "scripts"
        "logs"
        "data"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        print_success "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞
create_scripts() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞..."
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è Linux/macOS
    cat > start.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ TOT MVP

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ TOT MVP..."

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source venv/bin/activate

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if command -v docker &> /dev/null; then
    echo "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker..."
    docker-compose up -d
else
    echo "üêç –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ..."
    python backend/api-gateway/main.py &
    python backend/user-service/main.py &
    python backend/profile-service/main.py &
    python backend/booking-service/main.py &
    python backend/geo-service/main.py &
    python backend/payment-service/main.py &
    python backend/notification-service/main.py &
    echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
fi

echo "üåê API Gateway –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000"
echo "üìä Swagger UI: http://localhost:8000/docs"
EOF

    chmod +x start.sh
    print_success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç start.sh"
    
    # –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    cat > stop.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TOT MVP

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TOT MVP..."

if command -v docker &> /dev/null; then
    docker-compose down
else
    pkill -f "python.*main.py" || true
fi

echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
EOF

    chmod +x stop.sh
    print_success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç stop.sh"
    
    # –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    cat > status.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ TOT MVP

echo "üìä –°—Ç–∞—Ç—É—Å TOT MVP..."

if command -v docker &> /dev/null; then
    docker-compose ps
else
    echo "–ü—Ä–æ—Ü–µ—Å—Å—ã Python:"
    ps aux | grep "python.*main.py" | grep -v grep || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
fi

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ API:"
curl -s http://localhost:8000/health || echo "API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
EOF

    chmod +x status.sh
    print_success "–°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç status.sh"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ TOT MVP –¥–ª—è Linux/macOS"
    echo "================================================"
    
    check_requirements
    create_directories
    setup_python_env
    setup_node_env
    setup_docker
    create_scripts
    
    echo ""
    echo "================================================"
    print_success "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: ./start.sh"
    echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ./status.sh"
    echo "4. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: ./stop.sh"
    echo ""
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "- README.md - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    echo "- docs/ARCHITECTURE.md - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "- docs/DEPLOYMENT.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é"
    echo ""
    echo "üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8000"
    echo "üìä Swagger UI: http://localhost:8000/docs"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 