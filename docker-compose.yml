version: '3.8'

services:
  # База данных
  postgres:
    image: postgres:15-alpine
    container_name: tot-postgres
    environment:
      POSTGRES_DB: tot_mvp
      POSTGRES_USER: tot_user
      POSTGRES_PASSWORD: tot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tot-network

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: tot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tot-network

  # Backend API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: tot-api-gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: tot-user-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Profile Service
  profile-service:
    build:
      context: ./backend/profile-service
      dockerfile: Dockerfile
    container_name: tot-profile-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Booking Service
  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: tot-booking-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Geo Service
  geo-service:
    build:
      context: ./backend/geo-service
      dockerfile: Dockerfile
    container_name: tot-geo-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - YANDEX_MAPS_API_KEY=your-yandex-maps-api-key
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Payment Service
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: tot-payment-service
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=your-stripe-secret-key
      - STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: tot-notification-service
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - FIREBASE_SERVER_KEY=your-firebase-server-key
      - TWILIO_ACCOUNT_SID=your-twilio-account-sid
      - TWILIO_AUTH_TOKEN=your-twilio-auth-token
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Chat Service
  chat-service:
    build:
      context: ./backend/chat-service
      dockerfile: Dockerfile
    container_name: tot-chat-service
    ports:
      - "8007:8007"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - TWILIO_ACCOUNT_SID=your-twilio-account-sid
      - TWILIO_AUTH_TOKEN=your-twilio-auth-token
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Rating Service
  rating-service:
    build:
      context: ./backend/rating-service
      dockerfile: Dockerfile
    container_name: tot-rating-service
    ports:
      - "8008:8008"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Event Service
  event-service:
    build:
      context: ./backend/event-service
      dockerfile: Dockerfile
    container_name: tot-event-service
    ports:
      - "8009:8009"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Emergency Service
  emergency-service:
    build:
      context: ./backend/emergency-service
      dockerfile: Dockerfile
    container_name: tot-emergency-service
    ports:
      - "8010:8010"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Security Service
  security-service:
    build:
      context: ./backend/security-service
      dockerfile: Dockerfile
    container_name: tot-security-service
    ports:
      - "8011:8011"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network

  # Frontend приложения
  patient-app:
    build:
      context: ./frontend/patient-app
      dockerfile: Dockerfile
    container_name: tot-patient-app
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - tot-network

  doctor-app:
    build:
      context: ./frontend/doctor-app
      dockerfile: Dockerfile
    container_name: tot-doctor-app
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - tot-network

  clinic-web:
    build:
      context: ./frontend/clinic-web
      dockerfile: Dockerfile
    container_name: tot-clinic-web
    ports:
      - "3002:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - tot-network

  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: Dockerfile
    container_name: tot-admin-panel
    ports:
      - "3003:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    networks:
      - tot-network

  # Мониторинг
  prometheus:
    image: prom/prometheus:latest
    container_name: tot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tot-network

  grafana:
    image: grafana/grafana:latest
    container_name: tot-grafana
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tot-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  tot-network:
    driver: bridge 