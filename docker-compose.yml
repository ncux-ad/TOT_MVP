version: '3.8'

services:
  # Базы данных
  postgres:
    image: postgres:15-alpine
    container_name: tot-postgres
    environment:
      POSTGRES_DB: tot_mvp
      POSTGRES_USER: tot_user
      POSTGRES_PASSWORD: tot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tot-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: tot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tot-network
    restart: unless-stopped

  # Backend сервисы
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: tot-api-gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - USER_SERVICE_URL=http://user-service:8001
      - PROFILE_SERVICE_URL=http://profile-service:8002
      - BOOKING_SERVICE_URL=http://booking-service:8003
      - GEO_SERVICE_URL=http://geo-service:8004
      - PAYMENT_SERVICE_URL=http://payment-service:8005
      - NOTIFICATION_SERVICE_URL=http://notification-service:8006
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: tot-user-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  profile-service:
    build:
      context: ./backend/profile-service
      dockerfile: Dockerfile
    container_name: tot-profile-service
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  booking-service:
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile
    container_name: tot-booking-service
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  geo-service:
    build:
      context: ./backend/geo-service
      dockerfile: Dockerfile
    container_name: tot-geo-service
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - YANDEX_MAPS_API_KEY=${YANDEX_MAPS_API_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: tot-payment-service
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: tot-notification-service
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  # Заглушки для остальных сервисов
  chat-service:
    build:
      context: ./backend/chat-service
      dockerfile: Dockerfile
    container_name: tot-chat-service
    ports:
      - "8007:8007"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  rating-service:
    build:
      context: ./backend/rating-service
      dockerfile: Dockerfile
    container_name: tot-rating-service
    ports:
      - "8008:8008"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  event-service:
    build:
      context: ./backend/event-service
      dockerfile: Dockerfile
    container_name: tot-event-service
    ports:
      - "8009:8009"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  emergency-service:
    build:
      context: ./backend/emergency-service
      dockerfile: Dockerfile
    container_name: tot-emergency-service
    ports:
      - "8010:8010"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  security-service:
    build:
      context: ./backend/security-service
      dockerfile: Dockerfile
    container_name: tot-security-service
    ports:
      - "8011:8011"
    environment:
      - DATABASE_URL=postgresql://tot_user:tot_password@postgres:5432/tot_mvp
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - postgres
      - redis
    networks:
      - tot-network
    restart: unless-stopped

  # Frontend приложения (заглушки)
  patient-app:
    build:
      context: ./frontend/patient-app
      dockerfile: Dockerfile
    container_name: tot-patient-app
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - api-gateway
    networks:
      - tot-network
    restart: unless-stopped

  doctor-app:
    build:
      context: ./frontend/doctor-app
      dockerfile: Dockerfile
    container_name: tot-doctor-app
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - api-gateway
    networks:
      - tot-network
    restart: unless-stopped

  clinic-web:
    build:
      context: ./frontend/clinic-web
      dockerfile: Dockerfile
    container_name: tot-clinic-web
    ports:
      - "3002:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - api-gateway
    networks:
      - tot-network
    restart: unless-stopped

  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: Dockerfile
    container_name: tot-admin-panel
    ports:
      - "3003:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      - api-gateway
    networks:
      - tot-network
    restart: unless-stopped

  # Мониторинг
  prometheus:
    image: prom/prometheus:latest
    container_name: tot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tot-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: tot-grafana
    ports:
      - "3004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - tot-network
    restart: unless-stopped

  # Nginx для продакшена
  nginx:
    image: nginx:alpine
    container_name: tot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - patient-app
      - doctor-app
      - clinic-web
      - admin-panel
    networks:
      - tot-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  tot-network:
    driver: bridge 